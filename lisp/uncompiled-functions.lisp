(in-package "COMMON-LISP-USER")

(defun uncompiled-functions ()
  (let ((excluded-packages nil))
    (when (find-package "SWANK")
      (push (find-package "SWANK") excluded-packages))
    (when (find-package "SWANK-PROTOCOL")
      (push (find-package "SWANK-PROTOCOL") excluded-packages))
    (dotimes (i 2)
      (declare (type fixnum i))
      (if (eql i 0)
          (format t "Ordinary functions and macros:~%")
          (format t "Generic functions:~%"))
      (do-all-symbols (symbol)
        (let ((package (symbol-package symbol)))
          (cond ((memq package excluded-packages))
                ((special-operator-p symbol))
                ((autoloadp symbol))
                ((macro-function symbol)
                 (unless (compiled-function-p (macro-function symbol))
                   (format t "  ~S macro~%" symbol)))
                ((fboundp symbol)
                 (let ((function (symbol-function symbol)))
                   (cond ((typep function 'generic-function)
                          (when (eql i 1)
                            (cond ((compiled-function-p (sys:funcallable-instance-function function))
                                   (let ((methods (generic-function-methods function)))
                                     (dolist (method methods)
                                       (let ((method-function (method-function method))
                                             (method-fast-function (sys::method-fast-function method)))
                                         (when method-function
                                           (unless (compiled-function-p method-function)
                                             (format t "  ~S function~%" method)))
                                         (when method-fast-function
                                           (unless (compiled-function-p method-fast-function)
                                             (format t "  ~S fast function~%" method)))))))
                                  (t
                                   (format t "  ~S~%" function)))))
                         (t
                          (when (eql i 0)
                            (unless (compiled-function-p function)
                              (format t "  ~S~%" symbol))))))))))))
  (values))
